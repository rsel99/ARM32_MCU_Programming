//============================================================================
// ECE 362 lab experiment 8 -- SPI and DMA
//============================================================================

#include "stm32f0xx.h"
#include "lcd.h"
#include <stdio.h> // for sprintf()

// Be sure to change this to your login...
const char login[] = "selvara2";

// Prototypes for misc things in lcd.c
void nano_wait(unsigned int);

// Write your subroutines below.
void setup_bb () {
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    GPIOB->MODER |= GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0 | GPIO_MODER_MODER15_0;
    GPIOB->MODER &= ~(GPIO_MODER_MODER12_1 | GPIO_MODER_MODER13_1 | GPIO_MODER_MODER15_1);
    GPIOB->BSRR = GPIO_BSRR_BS_12;
    GPIOB->BSRR = GPIO_BSRR_BR_13;
}
void small_delay () {
    nano_wait(10000000);
}
void bb_write_bit (int n) {
    if (n == 1) {
        GPIOB->BSRR = GPIO_BSRR_BS_15;
    }
    else {
        GPIOB->BSRR = GPIO_BSRR_BR_15;
    }

    small_delay();

    GPIOB->BSRR = GPIO_BSRR_BS_13;

    small_delay();

    GPIOB->BSRR = GPIO_BSRR_BR_13;
}
void bb_write_byte (int n) {
    bb_write_bit((n >> 7) & 1);
    bb_write_bit((n >> 6) & 1);
    bb_write_bit((n >> 5) & 1);
    bb_write_bit((n >> 4) & 1);
    bb_write_bit((n >> 3) & 1);
    bb_write_bit((n >> 2) & 1);
    bb_write_bit((n >> 1) & 1);
    bb_write_bit( n       & 1);
}
void bb_cmd (int n) {
    GPIOB->BSRR = GPIO_BSRR_BR_12;
    small_delay();
    bb_write_bit(0);
    bb_write_bit(0);
    bb_write_byte(n);
    small_delay();
    GPIOB->BSRR = GPIO_BSRR_BS_12;
    small_delay();
}
void bb_data (int n) {
    GPIOB->BSRR = GPIO_BSRR_BR_12;
    small_delay();
    bb_write_bit(1);
    bb_write_bit(0);
    bb_write_byte(n);
    small_delay();
    GPIOB->BSRR = GPIO_BSRR_BS_12;
    small_delay();
}
void bb_init_oled () {
    nano_wait(1000000);
    bb_cmd(0x38);
    bb_cmd(0x08);
    bb_cmd(0x01);
    nano_wait(2000000);
    bb_cmd(0x06);
    bb_cmd(0x02);
    bb_cmd(0x0c);
}
void bb_display1 (const char * s) {
    bb_cmd(0x02);
    while (*s != 0) {
        bb_data(*s);
        s++;
    }
}
void bb_display2 (const char * s) {
    bb_cmd(0xc0);
    while (*s != 0) {
        bb_data(*s);
        s++;
    }
}
void setup_spi2 () {
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;

    GPIOB->MODER |= GPIO_MODER_MODER12_1 | GPIO_MODER_MODER13_1 | GPIO_MODER_MODER15_1;
    GPIOB->MODER &= ~(GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0 | GPIO_MODER_MODER15_0);

    SPI2->CR1 |= SPI_CR1_BR | SPI_CR1_MSTR;
    SPI2->CR1 |= SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
    SPI2->CR2 |= SPI_CR2_DS_0 | SPI_CR2_DS_3 | SPI_CR2_NSSP | SPI_CR2_SSOE;
    SPI2->CR2 &= ~(SPI_CR2_DS_1 | SPI_CR2_DS_2);
    SPI2->CR2 |= SPI_CR2_TXDMAEN;
    SPI2->CR1 |= SPI_CR1_SPE;
}
void spi_cmd (int n) {
    while(((SPI2->SR) & SPI_SR_TXE) == 0);
    SPI2->DR = n;
}
void spi_data (int n) {
    while(((SPI2->SR) & SPI_SR_TXE) == 0);
    SPI2->DR = (n | 0x200);
}
void spi_init_oled () {
    nano_wait(1000000);
    spi_cmd(0x38);
    spi_cmd(0x08);
    spi_cmd(0x01);
    nano_wait(2000000);
    spi_cmd(0x06);
    spi_cmd(0x02);
    spi_cmd(0x0c);
}
void spi_display1 (const char * s) {
    spi_cmd(0x02);
    while (*s != 0) {
        spi_data(*s);
        s++;
    }
}
void spi_display2 (const char * s) {
    spi_cmd(0xc0);
    while (*s != 0) {
        spi_data(*s);
        s++;
    }
}
void spi_enable_dma (const short * n) {
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;
    DMA1_Channel5->CPAR = (uint32_t) (&(SPI2->DR));
    DMA1_Channel5->CMAR = (uint32_t) n;
    DMA1_Channel5->CNDTR = 34;
    DMA1_Channel5->CCR |= DMA_CCR_DIR | DMA_CCR_MINC;
    DMA1_Channel5->CCR |= DMA_CCR_MSIZE_0;
    DMA1_Channel5->CCR &= ~DMA_CCR_MSIZE_1;
    DMA1_Channel5->CCR |= DMA_CCR_PSIZE_0;
    DMA1_Channel5->CCR &= ~DMA_CCR_PSIZE_1;
    DMA1_Channel5->CCR |= DMA_CCR_CIRC;
    DMA1_Channel5->CCR |= DMA_CCR_EN;

    SPI2->CR2 |= SPI_CR2_TXEIE;
}
void setup_spi1 () {
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    GPIOA->MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1;
    GPIOA->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER7_0);
    GPIOA->MODER |= GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0;
    GPIOA->MODER &= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);

    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
    SPI1->CR1 |= SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE | SPI_CR1_MSTR;
    SPI1->CR1 &= ~(SPI_CR1_BR);
    SPI1->CR2 |= SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2 | SPI_CR2_NSSP | SPI_CR2_SSOE;
    SPI1->CR1 |= SPI_CR1_SPE;
}
// Write your subroutines above.

void show_counter(short buffer[])
{
    for(int i=0; i<10000; i++) {
        char line[17];
        sprintf(line,"% 16d", i);
        for(int b=0; b<16; b++)
            buffer[1+b] = line[b] | 0x200;
    }
}

void internal_clock();
void demo();
void autotest();

extern const Picture *image;

int main(void)
{
    //internal_clock();
    demo();
//    autotest();

//    setup_bb();
//    bb_init_oled();
//    bb_display1("Hello,");
//    bb_display2(login);
//
//    setup_spi2();
//    spi_init_oled();
//    spi_display1("Hello again,");
//    spi_display2(login);

    short buffer[34] = {
            0x02, // This word sets the cursor to the beginning of line 1.
            // Line 1 consists of spaces (0x20)
            0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
            0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
            0xc0, // This word sets the cursor to the beginning of line 2.
            // Line 2 consists of spaces (0x20)
            0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
            0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220, 0x220,
    };

//    spi_enable_dma(buffer);
    show_counter(buffer);

//    setup_spi1();
    LCD_Init();
    LCD_Clear(BLACK);
    LCD_DrawLine(10,20,100,200, WHITE);
    LCD_DrawRectangle(10,20,100,200, GREEN);
    LCD_DrawFillRectangle(120,20,220,200, RED);
    LCD_Circle(50, 260, 50, 1, BLUE);
    LCD_DrawFillTriangle(130,130, 130,200, 190,160, YELLOW);
    LCD_DrawChar(150,155, BLACK, WHITE, 'X', 16, 1);
    LCD_DrawString(140,60,  WHITE, BLACK, "ECE 362", 16, 0);
    LCD_DrawString(140,80,  WHITE, BLACK, "has the", 16, 1);
    LCD_DrawString(130,100, BLACK, GREEN, "best toys", 16, 0);
    LCD_DrawPicture(110,220,(const Picture *)&image);
}
