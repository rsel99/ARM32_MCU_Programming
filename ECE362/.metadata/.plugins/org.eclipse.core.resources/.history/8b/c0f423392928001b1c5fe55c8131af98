//============================================================================
// ECE 362 lab experiment 10 -- Asynchronous Serial Communication
//============================================================================

#include "stm32f0xx.h"
#include "ff.h"
#include "diskio.h"
#include "fifo.h"
#include "tty.h"
#include <string.h> // for memset()
#include <stdio.h> // for printf()

void advance_fattime(void);
void command_shell(void);

// Write your subroutines below.
void setup_usart5() {
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIODEN;

    GPIOC->MODER &= ~(GPIO_MODER_MODER12);
    GPIOD->MODER &= ~(GPIO_MODER_MODER2);
    GPIOC->MODER |= GPIO_MODER_MODER12_1;
    GPIOD->MODER |= GPIO_MODER_MODER2_1;

    GPIOC->AFR[1] &= ~(GPIO_AFRH_AFR12);
    GPIOD->AFR[0] &= ~(GPIO_AFRL_AFR2);
    GPIOC->AFR[1] |= 2<<16;
    GPIOD->AFR[0] |= 2<<8;

    RCC->APB1ENR |= RCC_APB1ENR_USART5EN;

    USART5->CR1 &= ~(USART_CR1_UE);
    USART5->CR1 &= ~(1<<12 | 1<<28);
    USART5->CR2 &= ~(USART_CR2_STOP);
    USART5->CR1 &= ~(USART_CR1_PCE);
    USART5->CR1 &= ~(USART_CR1_OVER8);

    USART5->BRR &= ~(0xffff);
    USART5->BRR |= 0x1A1;

    USART5->CR1 |= (USART_CR1_TE | USART_CR1_RE);
    USART5->CR1 |= USART_CR1_UE;

    while ((USART5->CR1 & USART_CR1_TE & USART_CR1_RE) == 0);
}

int simple_putchar(int param) {
    while ((USART5->ISR & USART_ISR_TXE) == 0);
    USART5->TDR &= ~(0xff);
    USART5->TDR |= param;
    return (USART5->TDR & 0xff);
}

// Write your subroutines above.

const char testline[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\r\n";

int main()
{
    setup_usart5();

    // Uncomment these when you're asked to...
    //setbuf(stdin, 0);
    //setbuf(stdout, 0);
    //setbuf(stderr, 0);

    // Test 2.2 simple_putchar()
    //
    for(;;)
        for(const char *t=testline; *t; t++)
            simple_putchar(*t);

    // Test for 2.3 simple_getchar()
    //
    //for(;;)
    //    simple_putchar( simple_getchar() );

    // Test for 2.4 and 2.5 __io_putchar() and __io_getchar()
    //
    //printf("Hello!\n");
    //for(;;)
    //    putchar( getchar() );

    // Test for 2.6
    //
    //for(;;) {
    //    printf("Enter string: ");
    //    char line[100];
    //    fgets(line, 99, stdin);
    //    line[99] = '\0'; // just in case
    //    printf("You entered: %s", line);
    //}

    // Test for 2.7
    //
    //enable_tty_interrupt();
    //for(;;) {
    //    printf("Enter string: ");
    //    char line[100];
    //    fgets(line, 99, stdin);
    //    line[99] = '\0'; // just in case
    //    printf("You entered: %s", line);
    //}

    // Test for 2.8 Test the command shell and clock.
    //
    //enable_tty_interrupt();
    //setup_tim14();
    //FATFS fs_storage;
    //FATFS *fs = &fs_storage;
    //f_mount(fs, "", 1);
    //command_shell();

    return 0;
}
